syntax = "proto3";
package vault;


// VaultGrpc is append-only feed server model.
service VaultGrpc {

    // FeedService offers a client service to a vault's feed repo.
    // The client submits requests to be executed, and the server streams feed entries and completion status.
    // The return stream remains open as long as the client stream remains open.
    rpc         FeedService(stream FeedMsg)           returns (stream FeedMsg);

}



// FeedMsgOp tells a holder of a FeedMsg how to interpret its fields.
// The implicit context is if it's a message a server sends to a client or vice versa.
enum FeedMsgOp {

    /*
    ** 
    ** 
    ** SERVER => CLIENT
    ** 
    ** 
    **/

    // RecvEntry delivers the next entry in the feed stream identified by FeedMsg.FeedID.
    RecvEntry               = 0;

    // ReqComplete means the referenced request (via FeedMsg.ReqID) has successfully completed.
    // Other values in the FeedMsg are contextual the op that was completed.
    ReqComplete             = 1;

    // ReqDiscarded means the referenced request failed and/or has been cancelled.
    // If FeedMsg.MsgData != nil, then it is a serialized ReqErr describing why it was discarded.
    ReqDiscarded            = 2;


    /*
    ** 
    ** 
    ** CLIENT => SERVER
    ** 
    ** 
    **/

    // OpenFeed opens a given feed URI for access. 
    // FeedMsg.MsgData is a serialized OpenFeedReq. 
    // In the response ReqComplete msg, the server returns:
    //     a) FeedMsg.MetaStr to a "VaultCtx" token needed for a future OpenFeed call (see StreamMode).
    //     b) FeedMsg.FeedID to a unique ID and is used to identify all subsequent feed-specific messages.
    OpenFeed                = 30;

    // CloseFeed tells the server to cancel/stop/close the OpenFeedReq identified by FeedMsg.FeedID.
    CloseFeed               = 35;

    // AppendEntry tells the server to append MsgCodec & MsgData to the feed identified by FeedMsg.FeedID.
    // When this entry has been committed, a ReqComplete will be returned containing the newly assigned EntryID.
    AppendEntry             = 20; 

}


// FeedMsg is the generalized response object a server sends to the client as it processes each FeedReq sent by the client. 
message FeedMsg {

    // MsOp tells the client how to interpret the fields in this FeedMsg.
                FeedMsgOp           MsgOp                       = 1;
                
    // ReqID is set to value the originating FeedReq.ReqID was set to.
                uint32              ReqID                       = 2;

    // FeedID identifies the FeedURI opened via the completion of FeedMsgOp.OpenFeed.
                uint32              FeedID                      = 3;
    
    // MetaStr is a multi-purpose field used to communicate meta information -- varies per FeedMsgOp.
                string              MetaStr                     = 4;

    // MsgData is a multi-purpose content buffer that is contextual to each FeedMsgOp.
                bytes               MsgData                     = 5;

    // MsgCodec specifies the type and encoding of FeedMsg.MsgData.
    // FeedMsg.MsgData & MsgCodec originate from a client via FeedReqOp.AppendEntry.
    // Note: negative values are reserved for feed infrastructure internal use and can be ignored by the client.
                int32               MsgCodec                    = 10;

    // EntryID identifies a particular entry in this feed during this session.
                int64               EntryID                     = 12;
}


enum StreamMode {

    // DontStream means the server should not stream any entries.
    // This mode is typically used by clients that only want to append entries to a feed.
    // VaultCtx and SeekEntryID are ignored.
    DontStream              = 0;

    // FromGenesis tells the server to start streaming from the very beginning of the feed.  
    // VaultCtx and SeekEntryID are ignored.
    FromGenesis             = 1;

    // AtEntry tells the server to stream starting with SeekEntryID.
    AtEntry                 = 4;

    // AfterEntry tells the server to stream starting with the entry immediately *after* SeekEntryID.
    AfterEntry              = 5;

    // AfterHead tells the server to resume after the latest entry in this feed.
    // VaultCtx and SeekEntryID are ignored.
    AfterHead               = 7;
}


message OpenFeedReq {

    // FeedURI is the feed name to be opened.  
    // A feed URI a case-sensitive, UTF8, POSIX-style pathname with no leading or trailing slashes.
                string              FeedURI                     = 1;

    // StreamMode specifies if and where the server should start streaming feed entries.
                StreamMode          StreamMode                  = 3;

    // VaultCtx provides context for SeekEntryID -- see StreamMode.
                string              VaultCtx                    = 5;

    // SeekEntryID tells the server where to start streaming.
                int64               SeekEntryID                 = 6;

    // MaxEntriesToSend limits the number of entries the server will stream.
    // If 0, then no limit is set.
                int32               MaxEntriesToSend            = 7;

    // SendEntryIDsOnly tells the server to only send EntryIDs (MsgData and MsgCodec will be nil) 
                bool                SendEntryIDsOnly            = 8;

    // GenesisEntry signals to create a new feed.
    // If non-nil, FeedURI should be created and this entry should be the first entry appended to it.
                FeedMsg             GenesisEntry                = 10;
}


// ErrCode is used to unambiguously express common errors.
enum ErrCode {
    NoErr                       = 0;

    UnnamedErr                  = 5000;
    FeedReqCancelled            = 5001;

    InsufficientPermissions     = 5101;

    ReqNotFound                 = 5010;
    ReqInUse                    = 5011;

    InvalidFeedURI              = 5020;
    FeedNotFound                = 5021;
    FeedAlreadyExists           = 5022;

    UnrecognizedVaultCtx        = 5030;

}

// ReqErr wraps any error and is typically used in conjunction with FeedMsgOp.ReqDiscarded
message ReqErr {
                ErrCode             Code                        = 1;
                string              Msg                         = 2;
}