// source: vault.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vault.ErrCode', null, global);
goog.exportSymbol('proto.vault.FeedMsg', null, global);
goog.exportSymbol('proto.vault.FeedMsgOp', null, global);
goog.exportSymbol('proto.vault.OpenFeedReq', null, global);
goog.exportSymbol('proto.vault.ReqErr', null, global);
goog.exportSymbol('proto.vault.StreamMode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vault.FeedMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vault.FeedMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vault.FeedMsg.displayName = 'proto.vault.FeedMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vault.OpenFeedReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vault.OpenFeedReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vault.OpenFeedReq.displayName = 'proto.vault.OpenFeedReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vault.ReqErr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vault.ReqErr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vault.ReqErr.displayName = 'proto.vault.ReqErr';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vault.FeedMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.vault.FeedMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vault.FeedMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vault.FeedMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgop: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reqid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    feedid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    metastr: jspb.Message.getFieldWithDefault(msg, 4, ""),
    msgdata: msg.getMsgdata_asB64(),
    msgcodec: jspb.Message.getFieldWithDefault(msg, 10, 0),
    entryid: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vault.FeedMsg}
 */
proto.vault.FeedMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vault.FeedMsg;
  return proto.vault.FeedMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vault.FeedMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vault.FeedMsg}
 */
proto.vault.FeedMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vault.FeedMsgOp} */ (reader.readEnum());
      msg.setMsgop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReqid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeedid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetastr(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgdata(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgcodec(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEntryid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vault.FeedMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vault.FeedMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vault.FeedMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vault.FeedMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgop();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReqid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFeedid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMetastr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMsgdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getMsgcodec();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getEntryid();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
};


/**
 * optional FeedMsgOp MsgOp = 1;
 * @return {!proto.vault.FeedMsgOp}
 */
proto.vault.FeedMsg.prototype.getMsgop = function() {
  return /** @type {!proto.vault.FeedMsgOp} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vault.FeedMsgOp} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setMsgop = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 ReqID = 2;
 * @return {number}
 */
proto.vault.FeedMsg.prototype.getReqid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setReqid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 FeedID = 3;
 * @return {number}
 */
proto.vault.FeedMsg.prototype.getFeedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setFeedid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string MetaStr = 4;
 * @return {string}
 */
proto.vault.FeedMsg.prototype.getMetastr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setMetastr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes MsgData = 5;
 * @return {!(string|Uint8Array)}
 */
proto.vault.FeedMsg.prototype.getMsgdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes MsgData = 5;
 * This is a type-conversion wrapper around `getMsgdata()`
 * @return {string}
 */
proto.vault.FeedMsg.prototype.getMsgdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgdata()));
};


/**
 * optional bytes MsgData = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgdata()`
 * @return {!Uint8Array}
 */
proto.vault.FeedMsg.prototype.getMsgdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setMsgdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int32 MsgCodec = 10;
 * @return {number}
 */
proto.vault.FeedMsg.prototype.getMsgcodec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setMsgcodec = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 EntryID = 12;
 * @return {number}
 */
proto.vault.FeedMsg.prototype.getEntryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.vault.FeedMsg} returns this
 */
proto.vault.FeedMsg.prototype.setEntryid = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vault.OpenFeedReq.prototype.toObject = function(opt_includeInstance) {
  return proto.vault.OpenFeedReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vault.OpenFeedReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vault.OpenFeedReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    feeduri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streammode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    vaultctx: jspb.Message.getFieldWithDefault(msg, 5, ""),
    seekentryid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxentriestosend: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sendentryidsonly: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    genesisentry: (f = msg.getGenesisentry()) && proto.vault.FeedMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vault.OpenFeedReq}
 */
proto.vault.OpenFeedReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vault.OpenFeedReq;
  return proto.vault.OpenFeedReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vault.OpenFeedReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vault.OpenFeedReq}
 */
proto.vault.OpenFeedReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeduri(value);
      break;
    case 3:
      var value = /** @type {!proto.vault.StreamMode} */ (reader.readEnum());
      msg.setStreammode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaultctx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeekentryid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxentriestosend(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendentryidsonly(value);
      break;
    case 10:
      var value = new proto.vault.FeedMsg;
      reader.readMessage(value,proto.vault.FeedMsg.deserializeBinaryFromReader);
      msg.setGenesisentry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vault.OpenFeedReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vault.OpenFeedReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vault.OpenFeedReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vault.OpenFeedReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeeduri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreammode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getVaultctx();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSeekentryid();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMaxentriestosend();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSendentryidsonly();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getGenesisentry();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.vault.FeedMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional string FeedURI = 1;
 * @return {string}
 */
proto.vault.OpenFeedReq.prototype.getFeeduri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.setFeeduri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StreamMode StreamMode = 3;
 * @return {!proto.vault.StreamMode}
 */
proto.vault.OpenFeedReq.prototype.getStreammode = function() {
  return /** @type {!proto.vault.StreamMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vault.StreamMode} value
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.setStreammode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string VaultCtx = 5;
 * @return {string}
 */
proto.vault.OpenFeedReq.prototype.getVaultctx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.setVaultctx = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 SeekEntryID = 6;
 * @return {number}
 */
proto.vault.OpenFeedReq.prototype.getSeekentryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.setSeekentryid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 MaxEntriesToSend = 7;
 * @return {number}
 */
proto.vault.OpenFeedReq.prototype.getMaxentriestosend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.setMaxentriestosend = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool SendEntryIDsOnly = 8;
 * @return {boolean}
 */
proto.vault.OpenFeedReq.prototype.getSendentryidsonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.setSendentryidsonly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional FeedMsg GenesisEntry = 10;
 * @return {?proto.vault.FeedMsg}
 */
proto.vault.OpenFeedReq.prototype.getGenesisentry = function() {
  return /** @type{?proto.vault.FeedMsg} */ (
    jspb.Message.getWrapperField(this, proto.vault.FeedMsg, 10));
};


/**
 * @param {?proto.vault.FeedMsg|undefined} value
 * @return {!proto.vault.OpenFeedReq} returns this
*/
proto.vault.OpenFeedReq.prototype.setGenesisentry = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vault.OpenFeedReq} returns this
 */
proto.vault.OpenFeedReq.prototype.clearGenesisentry = function() {
  return this.setGenesisentry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vault.OpenFeedReq.prototype.hasGenesisentry = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vault.ReqErr.prototype.toObject = function(opt_includeInstance) {
  return proto.vault.ReqErr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vault.ReqErr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vault.ReqErr.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vault.ReqErr}
 */
proto.vault.ReqErr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vault.ReqErr;
  return proto.vault.ReqErr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vault.ReqErr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vault.ReqErr}
 */
proto.vault.ReqErr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vault.ErrCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vault.ReqErr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vault.ReqErr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vault.ReqErr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vault.ReqErr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ErrCode Code = 1;
 * @return {!proto.vault.ErrCode}
 */
proto.vault.ReqErr.prototype.getCode = function() {
  return /** @type {!proto.vault.ErrCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vault.ErrCode} value
 * @return {!proto.vault.ReqErr} returns this
 */
proto.vault.ReqErr.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Msg = 2;
 * @return {string}
 */
proto.vault.ReqErr.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vault.ReqErr} returns this
 */
proto.vault.ReqErr.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.vault.FeedMsgOp = {
  RECVENTRY: 0,
  REQCOMPLETE: 1,
  REQDISCARDED: 2,
  OPENFEED: 30,
  CLOSEFEED: 35,
  APPENDENTRY: 20
};

/**
 * @enum {number}
 */
proto.vault.StreamMode = {
  DONTSTREAM: 0,
  FROMGENESIS: 1,
  ATENTRY: 4,
  AFTERENTRY: 5,
  AFTERHEAD: 7
};

/**
 * @enum {number}
 */
proto.vault.ErrCode = {
  NOERR: 0,
  UNNAMEDERR: 5000,
  FEEDREQCANCELLED: 5001,
  INSUFFICIENTPERMISSIONS: 5101,
  REQNOTFOUND: 5010,
  REQINUSE: 5011,
  INVALIDFEEDURI: 5020,
  FEEDNOTFOUND: 5021,
  FEEDALREADYEXISTS: 5022,
  UNRECOGNIZEDVAULTCTX: 5030
};

goog.object.extend(exports, proto.vault);
